-Goal-
Given a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all knowledge concept relationships among the identified entities. Note: The knowledge concepts between the ** after the serial number at the beginning of each paragraph are entities
 
-Steps-
1. Identify all entities. For each identified entity, extract the following information:
- entity_name: Name of the entity, capitalized
- entity_type: One of the following types: [{entity_types}]
- entity_description: Comprehensive description of the entity's attributes and activities
Format each entity as ("entity"{tuple_delimiter}<entity_name>{tuple_delimiter}<entity_type>{tuple_delimiter}<entity_description>)
 
2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.
For each pair of related entities, extract the following information:
- source_entity: name of the source entity, as identified in step 1
- target_entity: name of the target entity, as identified in step 1
- relationship_description: explanation as to why you think the source entity and the target entity are related to each other
- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity
 Format each relationship as ("relationship"{tuple_delimiter}<source_entity>{tuple_delimiter}<target_entity>{tuple_delimiter}<relationship_description>{tuple_delimiter}<relationship_strength>)
 
3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **{record_delimiter}** as the list delimiter.
 
4. When finished, output {completion_delimiter}
 
######################
-Examples-
Example 1:
Entity_types: CONCEPT
Text:
Top-Down Parser is a parsing method used to analyze the structure of a given input string according to a given grammar.

LL parsing is a type of Top-Down Parser that reads input from left to right and produces a leftmost derivation.
######################
Output:
("entity"{tuple_delimiter}Top-Down Parser{tuple_delimiter}concept{tuple_delimiter}Top-Down Parser is a parsing method used to analyze the structure of a given input string according to a given grammar)
{record_delimiter}
("entity"{tuple_delimiter}LL{tuple_delimiter}concept{tuple_delimiter}LL parsing is a type of Top-Down Parser that reads input from left to right and produces a leftmost derivation)
{record_delimiter}
("relationship"{tuple_delimiter}LL{tuple_delimiter}Top-Down Parser{tuple_delimiter}LL parsing is a specific form of Top-Down Parser{tuple_delimiter}2)
{completion_delimiter}

######################
Example 2:
Entity_types: CONCEPT
Text:
Heap is a special tree-based data structure used to efficiently access the maximum or minimum element.

Stack is used for static memory allocation, following a last-in, first-out (LIFO) order.
######################
Output:
("entity"{tuple_delimiter}Heap{tuple_delimiter}concept{tuple_delimiter}Heap is used for dynamic memory allocation, where variables are allocated and deallocated in an arbitrary order)
{record_delimiter}
("entity"{tuple_delimiter}Stack{tuple_delimiter}concept{tuple_delimiter}Stack is used for static memory allocation, following a last-in, first-out (LIFO) order)
{record_delimiter}
("relationship"{tuple_delimiter}Heap{tuple_delimiter}Stack{tuple_delimiter}Heap and Stack are both types of memory used in computer systems, but they differ in how memory is allocated and managed{tuple_delimiter}2)
{completion_delimiter}

######################
-Real Data-
######################
Entity_types: {entity_types}
Text: {input_text}
######################
Output: